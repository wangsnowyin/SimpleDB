package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    JoinPredicate p;
    DbIterator child1;
    DbIterator child2;
    Tuple left;
    Tuple right;

    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
        this.p = p;
        this.child1 = child1;
        this.child2 = child2;
    }

    public JoinPredicate getJoinPredicate() {
        return this.p;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        TupleDesc td = child1.getTupleDesc();
        String f1 = td.getFieldName(this.p.getField1());
        return f1;
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        TupleDesc td = child2.getTupleDesc();
        String f2 = td.getFieldName(this.p.getField2());
        return f2;
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        TupleDesc td1 = child1.getTupleDesc();
        TupleDesc td2 = child2.getTupleDesc();
        return TupleDesc.merge(td1, td2);
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        super.open();
        this.child1.open();
        this.child2.open();
    }

    public void close() {
        this.child1.close();
        this.child2.close();
        super.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        this.child1.rewind();
        this.child2.rewind();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        if(left==null && child1.hasNext()){ //the first time to call fetchNext()
            left = child1.next();
        }
        while(left!=null){
            while(child2.hasNext()){
                right = child2.next();
                if(this.p.filter(left, right)){
                    Tuple t = new Tuple(getTupleDesc());
                    Iterator<Field> it1 = left.fields();
                    Iterator<Field> it2 = right.fields();

                    //set field values to new tuple
                    int i=0;
                    while(it1.hasNext()){
                        t.setField(i, it1.next());
                        i++;
                    }
                    while(it2.hasNext()){
                        t.setField(i, it2.next());
                        i++;
                    }
                    return t;
                }
            }
            if(child1.hasNext()) left = child1.next();
            else left = null;
            child2.rewind();
        }
        return null;
    }

    @Override
    public DbIterator[] getChildren() {
        DbIterator[] dbIt = new DbIterator[2];
        dbIt[0] = this.child1;
        dbIt[1] = this.child2;
        return dbIt;
    }

    @Override
    public void setChildren(DbIterator[] children) {
        if(children[0]!=null) this.child1 = children[0];
        if(children[1]!=null) this.child2 = children[1];
    }

}
